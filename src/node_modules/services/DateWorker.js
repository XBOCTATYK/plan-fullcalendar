export default class DateWorker {

     /**
     * Возвращает диапазон дат в виде строки
     * @param {object} range - объект с данными об диапазоне
     * @param {Date} range.from - дата начала диапазона
     * @param {Date} range.to - дата конца диапазона
     * @return {string}
     */
     static getStringRange = (range) => {
        if (range.from && !range.to) {
            return range.from.toLocaleDateString()
        }
        if (range.to) {
            return range.from.toLocaleDateString() + "-" + range.to.toLocaleDateString()
        } else {
            return ""
        }
    };

    /**
     * Возвращает диапазон дат
     * @param {object} range - объект с данными об диапазоне
     * @param {Date} range.from - дата начала диапазона
     * @param {Date} range.to - дата конца диапазона
     * @return {*}
     */
    static getRangeDate = (range) => {
        let timestampFrom = new Date(range.from);
        let dateArray = [];
        if (!range.to) return false;
        let timestampTo = new Date(range.to);
        let dayFrom = timestampFrom.getDate();
        let daysLag = Math.ceil(Math.abs(timestampFrom.getTime() - timestampTo.getTime()) / (1000 * 3600 * 24));

        for (let index = 0; index <= daysLag; index++) {
            timestampFrom = new Date(range.from).setDate(dayFrom + index);
        }

        return dateArray;
    };

    /**
     * Форматирует дату в формат DD.MM.YYYY
     * @param {Date} date - объект даты
     * @return {string}
     */
    static formatDate = function (date) {
        let thisDate = date || 0;
        let timestamp = new Date(thisDate);
        let month = timestamp.getMonth() + 1;

        if (month < 10) {
            month = '0' + month;
        }

        return timestamp.getDate() + '.' + (month) + '.' + timestamp.getFullYear();
    };


    /**
     * Создает дату из строки формата DD.MM.YYYY
     * @param {string} string
     * @returns {Date}
     */
    static parseDate = function (string) {
        if (!string || typeof string !== 'string') {
            throw new Error(`Передано неверное значение ${string} `);
        }
        let dateArray = string.split('.');
        let year = dateArray[2] || 1970;
        let month = dateArray[1] || 0;
        let day = dateArray[0] || 0;

        return new Date(year, month, day);
    };

    /**
     * Возвращает количество миллисекунд, соответствующим указанному количеству месяцев
     * @param {number} months - количество месяцев
     * @return {number}
     */
    static millisecondsFromMonth = function(months) {
        let date = new Date(0);
        date.setMonth(months);
        let dateDelta = new Date(0);
        return date.getTime() - dateDelta.getTime();
    };

    /**
     * Возвращает количество миллисекунд, соответствующим указанному количеству дней
     * @param {number} day - количество дней
     * @return {number}
     */
    static millisecondsFromDay =  function(day) {
        let date = new Date(0);
        date.setDate(day + 1);
        let dateDelta = new Date(0);
        return date.getTime() - dateDelta.getTime();
    }


}