export default class ControllerDataManager {
    constructor(actionMeta, hooks) {

        if (!actionMeta) return;

        const EmptyFunc = () => {};

        /* Метаданные объекта */
        this.namespace = actionMeta.namespace;
        this.module = actionMeta.module;
        this.controller = actionMeta.controller;
        this.methods = actionMeta.methods;

        this.methods.getList = actionMeta.methods.getList || 'getList';
        this.methods.add = actionMeta.methods.add || 'add';
        this.methods.getOne = actionMeta.methods.getOne || 'getOne';
        this.methods.updateOne = actionMeta.methods.updateOne || 'updateOne';
        this.methods.search = actionMeta.methods.search || 'search';

        /* Хуки */

        if (hooks) {
            this.beforeGetList = hooks.beforeGetList || EmptyFunc;
            this.thenResponse = hooks.thenResponse || EmptyFunc;
            this.thenError = hooks.thenError || EmptyFunc;
        } else {
            this.beforeGetList = EmptyFunc;
            this.thenResponse = EmptyFunc;
            this.thenError =  EmptyFunc;
        }
    }

    getList(data) {
        return new Promise((resolve, reject) => {
            this.beforeGetList(data);

            BX.ajax.runAction(`${this.namespace}:${this.module}.${this.controller}.${this.methods.getList}`, {
                data: data
            }).then(response => {
                this.thenResponse(response);

                resolve(response)
            },
                response => {
                    this.thenResponse(response);

                    reject(response)
                })
            .catch( error => {
                this.thenError();
                reject(error.message)
            });
        })
    }

    getOne(data) {
        return new Promise((resolve, reject) => {
            BX.ajax.runAction(`${this.namespace}:${this.module}.${this.controller}.${this.methods.getOne}`, {
                data: data
            }).then(response => {
                    this.thenResponse(response);

                    resolve(response)
                },
                response => {
                    this.thenError(response);

                    reject(response)
                })
                .catch( error => {
                    this.thenError();
                    reject(error.message)
                });
        })
    }

    updateOne(data) {

        return new Promise((resolve, reject) => {
            BX.ajax.runAction(`${this.namespace}:${this.module}.${this.controller}.${this.methods.updateOne}`, {
                data: data
            }).then(response => {
                    this.thenResponse(response);

                    resolve(response)
                },
                response => {
                    this.thenError(response);

                    reject(response)
                })
                .catch( error => {
                    this.thenError();
                    reject(error.message)
                });
        })
    }

    add(data) {
        return new Promise((resolve, reject) => {

            BX.ajax.runAction(`${this.namespace}:${this.module}.${this.controller}.${this.methods.add}`, {
                data: data
            }).then(response => {
                    this.thenResponse(response);

                    resolve(response)
                },
                response => {
                    this.thenError(response);

                    reject(response)
                })
                .catch( error => {
                    this.thenError();
                    reject(error.message)
                });
        })
    }

    getDefault(data) {
        return new Promise((resolve, reject) => {

            BX.ajax.runAction(`${this.namespace}:${this.module}.${this.controller}.${this.methods.getDefault}`, {
                data: data
            }).then(response => {
                    this.thenResponse(response);

                    resolve(response)
                },
                response => {
                    this.thenError(response);

                    reject(response)
                })
                .catch( error => {
                    this.thenError();
                    reject(error.message)
                });
        })
    }

    search(data) {
        return new Promise((resolve, reject) => {

            BX.ajax.runAction(`${this.namespace}:${this.module}.${this.controller}.${this.methods.search}`, {
                data: data
            }).then(response => {
                    this.thenResponse(response);

                    resolve(response)
                },
                response => {
                    this.thenError(response);

                    reject(response)
                })
                .catch( error => {
                    this.thenError();
                    reject(error.message)
                });
        })
    }

}
