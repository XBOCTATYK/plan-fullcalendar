import React, {Component} from 'react';
import AppDate from 'entities/date';
import {observer} from "mobx-react";
import FullCalendar from '@fullcalendar/react'
import dayGridPlugin from '@fullcalendar/daygrid';
import interactionPlugin, {Draggable} from '@fullcalendar/interaction'
import resourceTimeGridPlugin from '@fullcalendar/resource-timegrid';
import {CalendarApiItem, CalendarApiDistributor} from 'entities/calendarApiDistributor';
import {EmptyFunc} from 'services/helper';
import '@fullcalendar/core/main.css';
import '@fullcalendar/daygrid/main.css';
import '@fullcalendar/timegrid/main.css';
import './DaysList.css';

const ApiDistributor = CalendarApiDistributor.getInstance();

const CalendarController = observer(
    class DaysListClass extends Component {
        constructor(props) {
            super(props);
            this.appDateInstance = new AppDate();

            this.calendarRef = React.createRef()
        }

        static defaultProps = {
            planItems: [],
            calendarName: 'calendar_dev',
            hours: 2,
            showHeader: false,
            eventClickHandler: EmptyFunc,
            eventResizeHandler: EmptyFunc,
            onSelectTime: EmptyFunc
        };

        state = {
            eventsModels: [],
            planItems: this.props.planItems,
        };

        componentDidMount() {
            let calendarApi = this.calendarRef.current.getApi();
            this.calendarApi = new CalendarApiItem(calendarApi);
            ApiDistributor.addApi(this.calendarApi, this.props.calendarName);
        }

        addEvent = (event) => {
            event.calendarApi = this.calendarApi;
            console.log(event);
            this.props.eventClickHandler(event);
        };

        eventPick = (event) => {
            event.calendarApi = this.calendarApi;
            console.log(event);
            this.props.eventClickHandler(event);
        };

        resizeEvent = (event) => {
            event.calendarApi = this.calendarApi;
            console.log(event);
            this.props.eventClickHandler(event);
        };

        render() {
            const {daysCount, planItems, hours, showHeader} = this.props;
            const showWeekend = (daysCount === "7");

            return (
                <>
                    <FullCalendar
                        ref={this.calendarRef}
                        defaultView='timeGridWeek'
                        editable
                        selectable
                        droppable
                        minTime={"10:00:00"}
                        maxTime={`${10+hours}:00:00`}
                        slotDuration={"0:15"}
                        allDayMaintainDuration
                        events={planItems}
                        locale={'ru'}
                        weekends={showWeekend}
                        firstDay={1}
                        snapDuration={"0:15"}
                        allDaySlot={false}
                        columnHeader={showHeader}
                        header={showHeader ? {left: 'title', center: '', right: 'today prev,next'} : false}
                        slotLabelFormat={{
                            hour: '2-digit',
                            minute: '2-digit',
                            hour12: false,
                            omitZeroMinute: false,
                            meridiem: false
                        }}
                        eventResize={this.resizeEvent}
                        select={this.addEvent}
                        eventClick={this.eventPick}
                        plugins={[dayGridPlugin, interactionPlugin, resourceTimeGridPlugin]}
                    >
                        <Draggable minDistance={1}/>
                    </FullCalendar>
                </>
            );
        }
    }
);

export default CalendarController;
