import React, {Component} from 'react';
import PropTypes from 'prop-types';
import {observer} from "mobx-react";
import FullCalendar from '@fullcalendar/react'
import dayGridPlugin from '@fullcalendar/daygrid';
import interactionPlugin, {Draggable} from '@fullcalendar/interaction'
import resourceTimeGridPlugin from '@fullcalendar/resource-timegrid';
import {CalendarApiItem, CalendarApiDistributor} from 'entities/calendarApiDistributor';
import {EmptyFunc, getMonday, getDaysInMilliseconds} from 'services/helper';
import '@fullcalendar/core/main.css';
import '@fullcalendar/daygrid/main.css';
import '@fullcalendar/timegrid/main.css';
import './DaysList.css';

const ApiDistributor = CalendarApiDistributor.getInstance();

/**
 * Facade for FullCalendar component. Configuration and callbacks
 * @type {{defaultProps, new(*=): DaysListClass, calendarRef: *, calendarApi: *, new<P, S>(props: Readonly<P>): DaysListClass, new<P, S>(props: P, context?: any): DaysListClass, prototype: DaysListClass}}
 */
class CalendarController extends Component {
        constructor(props) {
            super(props);
            this.calendarRef = React.createRef()
        }

        static defaultProps = {
            planItems: [],
            calendarName: 'calendar_dev',
            hours: 2,
            showHeader: false,
            eventClickHandler: EmptyFunc,
            eventDropHandler: EmptyFunc,
            eventResizeHandler: EmptyFunc,
            onSelectTime: EmptyFunc,
            onUnselectTime: EmptyFunc,
            weekChanged: EmptyFunc,
            eventCopy: EmptyFunc,
            daysCount: 5,
            selectedDate: new Date()
        };

        static propTypes = {
            planItems: PropTypes.arrayOf(PropTypes.object),
            calendarName: PropTypes.string,
            hours: PropTypes.number,
            showHeader: PropTypes.bool,
            eventClickHandler: PropTypes.func,
            eventDropHandler: PropTypes.func,
            eventResizeHandler: PropTypes.func,
            onSelectTime: PropTypes.func,
            onUnselectTime: PropTypes.func,
            weekChanged: PropTypes.func,
            eventCopy: PropTypes.func,
            daysCount: PropTypes.number
        };

        state = {
            eventsModels: [],
            planItems: this.props.planItems,
        };

        componentDidMount() {
            /* Creating link for this instance of CalendarApi and adding it to store */
            let calendarApi = this.calendarRef.current.getApi();
            this.calendarApi = new CalendarApiItem(calendarApi);
            ApiDistributor.addApi(this.calendarApi, this.props.calendarName);
        }

        withCalendarApi = (func) => {
            return (event) => {
                event.calendarApi = this.calendarApi;
                event.calendarCode = this.props.calendarCode;
                func(event);
            }
        };

        onDrag = (event) => {
            if (event.jsEvent.shiftKey) {
                this.props.eventCopy(event);
            }
        };

        render() {
            const {daysCount, planItems, hours, showHeader, selectedDate} = this.props;
            const startDate = getMonday(selectedDate);
            const endDate = new Date(startDate.getTime()+getDaysInMilliseconds(daysCount - 1));

            return (
                <div className={`zone-${this.props.calendarCode}`}>
                    <FullCalendar
                        ref={this.calendarRef}
                        defaultView='timeGrid'
                        editable
                        selectable
                        droppable
                        navLinks
                        minTime={"10:00:00"}
                        maxTime={`${10 + hours}:00:00`}
                        slotDuration={"0:15"}
                        allDayMaintainDuration
                        events={planItems}
                        locale={'ru'}
                        visibleRange={{
                            start: startDate,
                            end: endDate
                        }}
                        firstDay={1}
                        snapDuration={"0:15"}
                        allDaySlot={false}
                        columnHeader={showHeader}
                        header={showHeader ? {left: 'title', center: '', right: ''} : false}
                        slotLabelFormat={{
                            hour: '2-digit',
                            minute: '2-digit',
                            hour12: false,
                            omitZeroMinute: false,
                            meridiem: false
                        }}
                        plugins={[dayGridPlugin, interactionPlugin, resourceTimeGridPlugin]}
                        eventResize={this.withCalendarApi(this.props.eventResizeHandler)}
                        select={this.withCalendarApi(this.props.onSelectTime)}
                        unselect={this.withCalendarApi(this.props.onUnselectTime)}
                        eventClick={this.withCalendarApi(this.props.eventClickHandler)}
                        eventDrop={this.withCalendarApi(this.props.eventDropHandler)}
                        drop={this.withCalendarApi(this.props.eventDropHandler)}
                        navLinkWeekClick={this.withCalendarApi(this.props.weekChanged)}
                        navLinkDayClick={this.withCalendarApi(this.props.weekChanged)}
                        eventDragStart={this.withCalendarApi(this.onDrag)}
                        eventLeave={this.withCalendarApi(this.props.onLeaveCalendar)}
                        eventBackgroundColor={'#f3f6f8'}
                        eventBorderColor={'rgba(0, 0, 0, 0.15)'}
                        eventTextColor={'#4b4b4b'}
                        eventRender={eventRender}
                        eventOrder={eventOrder}
                    >
                        <Draggable minDistance={1}/>
                    </FullCalendar>
                </div>
            );
        }
    }


function eventRender(info) {
    const element = info.el;
    const typeOfEvent = info.event.extendedProps.type;

    if (typeOfEvent) {
        element.classList.add('type-' + typeOfEvent);
    }
}

function eventOrder(info) {
    return info.type === 'time' ? 1 : -1;
}

export default CalendarController;
