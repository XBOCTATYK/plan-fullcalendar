import React, {Component} from 'react';

/**
 * Список элементов для выбранного компонента
 * @param WrappedComponent
 * @param DataManager
 * @return {{contextType?: React.Context<any>, new<P, S>(props: Readonly<P>): FetchLabel, new<P, S>(props: P, context?: any): FetchLabel, prototype: FetchLabel}}
 */
export default function fetchLabel(WrappedComponent, DataManager) {
    return class FetchLabel extends Component {

        static defaultProps = {
            onChange: () => {}
        };

        state = {
            labelsList: [],
            valueId: this.props.value,
            value: null
        };

        getList = (name) => {

            const requestName = name || '';

            DataManager.getList({name: requestName}).then(result => {
                let labelsArray = [];
                let value = null;
                const list = result.data;

                for (let item of list) {
                    item.id = item.ID;
                    labelsArray.push(item);
                }

                this.setState({labelsList: labelsArray});
            });
        };

        setValue = (externalValue) => {
          DataManager.getOne({id: this.state.valueId}).then(result => {
              if (result.data) {
                  this.setState({value: result.data.label})
              }
          })
        };

        getFromLabelList = (id, name) => {
            if (!this.state.labelsList) return name;

            const element = this.state.labelsList.find(item => item.id === id);
            if (!element) return name;

            return element.label;
        };

        onChange = (event) => {
            this.getList(event.target.value);
            this.setState({value: this.getFromLabelList(event.target.valueId, event.target.value)});
            this.props.onChange(event);
        };

        onFocus = (event) => {
            if (!this.state.labelsList) {
                this.getList(event.target.value)
            }
        };

        componentWillMount() {
            if (this.state.valueId) {
                this.setValue(this.state.valueId);
            }
        }

        render() {
            return <WrappedComponent
                {...this.props}
                onChange={this.onChange}
                onFocus={this.onFocus}
                value={this.state.value}
                labelsList={this.state.labelsList}
            />
        }
    }
}
