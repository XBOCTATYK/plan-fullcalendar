import React, {Component} from 'react';
import { MESSAGE_STATUS } from 'config/notifies.config';

/**
 * НОС для показа сообщений при разных событиях
 * @param {Component} WrappedComponent
 * @param {Component} Notifier
 * @return {{contextType?: React.Context<any>, new<P, S>(props: Readonly<P>): WithNotifies, new<P, S>(props: P, context?: any): WithNotifies, prototype: WithNotifies}}
 */
export default function withNotifies(WrappedComponent, Notifier) {
    return class WithNotifies extends Component{

        state = {
            messageStatus: MESSAGE_STATUS.NEUTRAL,
            messageText: '',
            active: false,
            data: null
        };

        setNotify = (status, message, data) => {
            this.setState({messageStatus: status, messageText: message, active: true, data: data});
        };

        hideNotify = () => {
            this.setState({active: false})
        };

        render() {

            const NotifyComponent = Notifier;

            return (
                <React.Fragment>
                    <WrappedComponent {...this.props}
                                      onSuccess={this.setNotify.bind(null, MESSAGE_STATUS.SUCCESS)}
                                      onError={this.setNotify.bind(null, MESSAGE_STATUS.ERROR)}
                                      onWarning={this.setNotify.bind(null, MESSAGE_STATUS.WARNING)}
                                      onInfo={this.setNotify.bind(null, MESSAGE_STATUS.INFO)}
                                      showMessage={this.setNotify.bind(null, MESSAGE_STATUS.NEUTRAL)}
                    />
                    <NotifyComponent status={this.state.messageStatus}
                                     message={this.state.messageText}
                                     open={this.state.active}
                                     hide={this.hideNotify}
                                     data={this.state.data}
                    />
                </React.Fragment>
                )

        }
    }
}
