import React, {Component} from 'react';
import {observer} from "mobx-react";
import ControlPanel from 'components/ControlPanel/ControlPanel';
import {PlanItemCollectionMobx} from "entities/planItems";
import ModalWindow from "components/ModalWindow/ModalWindow";
import {ModalItemEntity} from 'entities/ui';
import CreatePlanItem from 'components/Forms/CreatePlanItem/CreatePlanItem';
import appParams from 'startData/app.json';
import {CalendarApiDistributor} from 'entities/calendarApiDistributor';
import EventsOperationsLogic from 'components/EventsOperationsLogic/EventsOperationsLogic';
import EventModel from 'RestModels/EventModel';
import {zoneList} from 'config/app.config';
import {EmptyFunc} from 'services/helper';


let PlanItemsCollection = new PlanItemCollectionMobx();

let ModalStatus = new ModalItemEntity();
ModalStatus.setParams(appParams);
export let appUi = React.createContext({modal: ModalStatus});

const MainComponent = observer(
class MainComponentObservable  extends Component {

    static defaultProps = {
        onSuccess: EmptyFunc,
        onError: EmptyFunc
    };

    state = {
        items1: [],
        items2: [],
        userCount: 0,
        splitMode: false,
        apiCollection: CalendarApiDistributor.getInstance(),
        currentUser1: null,
        currentUser2: null
    };

    componentWillMount() {
        this.getUser(this.props.controlPanelParams.user1, 1);
    }

    onError = (error) => {
        this.props.onError(error.message);
    };

    getUser = (user, number) => {
        const userCount = this.state.userCount + 1;
        const Events = new EventModel();

        this.setState({[`items${number}`]: []});

        Events.getAll(user, 20)
            .then((result) => {
                this.setState({
                    [`items${number}`]: result.items,
                    userCount: userCount
                }, () => {
                    window.dispatchEvent(new Event('resize'));
                    this.forceUpdate()
                })
            })
            .catch((error) => {
                this.onError(error.message)
            });
    };

    componentDidUpdate(prevProps, prevState, snapshot) {
        const {controlPanelParams} = this.props;

        for (let index = 1; index <= this.state.userCount; index++ ) {
            if (controlPanelParams[`user${index}`] !== this.state[`currentUser${index}`]) {
                this.getUser(controlPanelParams[`user${index}`], index);
                this.setState({[`currentUser${index}`]: controlPanelParams[`user${index}`]})
            }
        }
    }

    render() {
        const {controlPanelParams} = this.props;

        return (
            <React.Fragment>
                <ControlPanel filterParams={controlPanelParams}/>
                <appUi.Provider value={{modal: ModalStatus}}>
                    <div className="flex">
                        {
                            this.state.items1.length &&
                            <div className="flex-container">
                                <EventsOperationsLogic
                                    userId={controlPanelParams.user1}
                                    zones={zoneList}
                                    items={this.state.items1}
                                    daysCount={+controlPanelParams.days}
                                    modalControl={ModalStatus}
                                />
                            </div>
                        }
                        {
                            (this.state.items2.length && controlPanelParams.splitCalendar) &&
                            <div className="flex-container">
                                <EventsOperationsLogic
                                    userId={controlPanelParams.user2}
                                    zones={zoneList}
                                    items={this.state.items2}
                                    daysCount={+controlPanelParams.days}
                                    modalControl={ModalStatus}
                                />
                            </div>
                        }
                    </div>
                </appUi.Provider>
                <ModalWindow status={ModalStatus}>
                    <CreatePlanItem
                        planItemsCollection={PlanItemsCollection}
                        cancel={() => {
                            ModalStatus.makeInvisible()
                        }}
                        params={ModalStatus.params}
                        successCallback={ModalStatus.successCallback}
                        cancelCallback={ModalStatus.cancelCallback}
                    />
                </ModalWindow>
            </React.Fragment>
        );
    }
});

export default MainComponent;
