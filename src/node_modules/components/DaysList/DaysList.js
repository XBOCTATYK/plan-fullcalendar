import React, {Component} from 'react';
import AppDate from 'entities/date';
import {observer} from "mobx-react";
import FullCalendar from '@fullcalendar/react'
import dayGridPlugin from '@fullcalendar/daygrid';
import interactionPlugin, {Draggable} from '@fullcalendar/interaction'
import resourceTimeGridPlugin from '@fullcalendar/resource-timegrid';
import '@fullcalendar/core/main.css';
import '@fullcalendar/daygrid/main.css';
import '@fullcalendar/timegrid/main.css';


const DaysList = observer(
    class DaysListClass extends Component {
        constructor(props) {
            super(props);
            this.appDateInstance = new AppDate();

            this.calendarRef = React.createRef()
        }

        static defaultProps = {
            planItems: []
        };

        state = {
            eventsModels: [],
            prevPlanItems: this.props.planItems,
            planItems: this.props.planItems,
            api: null
        };

        componentDidUpdate(prevProps, prevState, snapshot) {
            if (!this.state.api) return;

            if (prevProps.lol !== this.props.lol) {
                this.actualizeData(prevProps);
            }
        }

        actualizeData = (prevProps) => {
            const propsPlanItems = this.props.planItems;
            const calendarPlanItems = this.state.api.getEvents();
            let index = 0;

            /*while (propsPlanItems[index] || calendarPlanItems[index]) {
                if (calendarPlanItems[index] && propsPlanItems[index]) {
                    calendarPlanItems[index].setStart(propsPlanItems.start)
                }

                if (!calendarPlanItems[index]) {
                    this.state.api.addEvent(calendarPlanItems[index]);
                }


            }*/
        };

        componentDidMount() {
            let calendarApi = this.calendarRef.current.getApi();

            this.setState({api: calendarApi});
        }

        addEvent = (event) => {
            if (!this.state.api) return;

            this.state.api.addEvent({start: event.start, end: event.end})
        };

        render() {
            const {daysCount, planItems} = this.props;
            const showWeekend = (daysCount === "7");

            return (
                <>
                    <div className={this.props.lol}/>
                    <FullCalendar
                        ref={this.calendarRef}
                        defaultView='timeGridWeek'
                        editable
                        selectable
                        minTime={"10:00:00"}
                        maxTime={"15:00:00"}
                        slotDuration={"0:15"}
                        allDayMaintainDuration
                        events={planItems}
                        locale={'ru'}
                        weekends={showWeekend}
                        firstDay={1}
                        snapDuration={"0:15"}
                        slotLabelFormat={{
                            hour: '2-digit',
                            minute: '2-digit',
                            hour12: false,
                            omitZeroMinute: false,
                            meridiem: false
                        }}
                        eventDataTransform={this.setModel}
                        eventResize={(event) => {
                            console.log(event)
                        }}
                        select={this.addEvent}
                        eventClick={(event) => {
                            console.log(event)
                        }}
                        plugins={[dayGridPlugin, interactionPlugin, resourceTimeGridPlugin]}
                    >
                        <Draggable/>
                    </FullCalendar>
                </>
            );
        }
    }
);

export default DaysList;
