import React, {Component} from 'react';
import CalendarController from "components/CalendarController/CalendarController";
import AddButton from 'components/Buttons/AddButton';
import FixBottomContainer from 'components/ui/FixBottomContainer/FixBottomContainer';
import {getMinutesBetweenDates} from 'services/utils/dateFunctions';
import EventModel from 'RestModels/EventModel';

const Events = new EventModel();

class EventsOperationsLogic extends Component {

    static defaultProps = {
        daysCount: 5,
        items: []
    };

    state = {
        onSelectPanelShow: false,
        onPickEventPanelShow: false,
        currentApi: null,
        currentEvent: null
    };

    componentDidMount() {
        this.props.modalControl.setCancelCallback(this.closeAll);
    }

    eventClickHandler = (event) => {
        this.setState({
            onSelectPanelShow: false,
            onPickEventPanelShow: true,
            currentApi: event.calendarApi,
            currentEvent: event
        });
    };

    onResizeEvent = (event) => {
        this.setState({onPickEventPanelShow: false});
    };

    onSelectTime = (event) => {
        this.setState({
            onSelectPanelShow: true,
            onPickEventPanelShow: false,
            currentApi: event.calendarApi,
            currentEvent: event
        });
    };

    onUnselectTime = () => {
        this.setState({onSelectPanelShow: false});
    };

    closeAll = async() => {
        this.setState({
            onSelectPanelShow: false,
            onPickEventPanelShow: false,
        });

        return {status: true}
    };

    addEventModal = (event) => {
        event.stopPropagation();
        let params = {};

        params.time = getMinutesBetweenDates(this.state.currentEvent.start, this.state.currentEvent.end);

        this.props.modalControl.setParams(params);
        this.props.modalControl.makeVisible();
    };

    removeHandler = (event) => {
        event.stopPropagation();
        const eventApi = this.state.currentEvent.event;

        this.state.currentApi.removeItem(eventApi.id);
        this.setState({onPickEventPanelShow: false});
    };

    changeEventModal = (event) => {
        event.stopPropagation();
        let params = {};
        const eventApi = this.state.currentEvent.event;

        if (!eventApi) {
            console.error('Что-то не так c eventApi');
            return;
        }

        const startTime = eventApi.start;
        const endTime = eventApi.end;

        params = {...eventApi.extendedProps, time: getMinutesBetweenDates(startTime, endTime)};

        this.props.modalControl.setSuccessCallback(this.changeEvent.bind(null, eventApi.id));
        this.props.modalControl.setParams(params);
        this.props.modalControl.makeVisible()
    };

    changeEvent = async (id, params) => {
        try {
            const answer = await Events.change(id, params);
            this.closeAll();
            this.state.currentApi.changeItem(id, params);

            return answer;
        }  catch (e) {
            console.error(e.message);
            this.closeAll();
        }
    };

    render() {
        return (
            <React.Fragment>
                <div className={'flex'}>
                    <div className={'flex-container'}>
                        <CalendarController
                            planItems={this.props.items}
                            daysCount={this.props.daysCount}
                            calendarName={'productive_dev1'}
                            hours={5}
                            onSelectTime={this.onSelectTime}
                            onUnselectTime={this.onUnselectTime}
                            eventClickHandler={this.eventClickHandler}
                            eventResizeHandler={this.onResizeEvent}
                            showHeader
                        />
                    </div>
                    <div className={'flex-container'}>
                        <CalendarController
                            planItems={this.props.items}
                            daysCount={this.props.daysCount}
                            calendarName={'productive_dev2'}
                            hours={5}
                            onSelectTime={this.onSelectTime}
                            onUnselectTime={this.onUnselectTime}
                            eventClickHandler={this.eventClickHandler}
                            showHeader
                        />
                    </div>
                </div>
                <h3>Оценки</h3>
                <div className={'flex'}>
                    <div className={'flex-container'}>
                        <CalendarController
                            planItems={this.props.items}
                            daysCount={this.props.daysCount}
                            calendarName={'estimate_dev1'}
                            hours={2}
                        />
                    </div>
                    <div className={'flex-container'}>
                        <CalendarController
                            planItems={this.props.items}
                            daysCount={this.props.daysCount}
                            calendarName={'estimate_dev2'}
                            hours={2}
                        />
                    </div>
                </div>
                <h3>Тех.долг</h3>
                <div className={'flex'}>
                    <div className={'flex-container'}>
                        <CalendarController
                            planItems={this.props.items}
                            daysCount={this.props.daysCount}
                            calendarName={'techrent_dev1'}
                            hours={2}
                        />
                    </div>
                    <div className={'flex-container'}>
                        <CalendarController
                            planItems={this.props.items}
                            daysCount={this.props.daysCount}
                            calendarName={'techrent_dev2'}
                            hours={2}
                        />
                    </div>
                    <FixBottomContainer show={this.state.onSelectPanelShow} elementSelector={'.fc-highlight'}>
                        <div className={'flex'}>
                            <AddButton onClick={this.addEventModal}>Бронь</AddButton>
                            <AddButton onClick={this.addEventModal}>Отметка о времени</AddButton>
                        </div>
                    </FixBottomContainer>
                    <FixBottomContainer show={this.state.onPickEventPanelShow} elementSelector={'.fc-allow-mouse-resize'}>
                        <div className={'flex'}>
                            <AddButton onClick={this.changeEventModal}>Изменить</AddButton>
                            <AddButton onClick={this.removeHandler}>Удалить</AddButton>
                        </div>
                    </FixBottomContainer>
                </div>
            </React.Fragment>
        );
    }
}

export default EventsOperationsLogic;
