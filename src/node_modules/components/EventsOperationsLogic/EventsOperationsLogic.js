import React, {Component} from 'react';
import PropTypes from 'prop-types';
import CalendarController from 'components/CalendarController/CalendarController';
import AddButton from 'components/Buttons/AddButton';
import FixBottomContainer from 'components/ui/FixBottomContainer/FixBottomContainer';
import {getMinutesBetweenDates} from 'services/utils/dateFunctions';
import EventModel from 'RestModels/EventModel';
import ButtonGroup from '@material-ui/core/ButtonGroup';
import NavBar from 'components/NavBar/NavBar';

const Events = new EventModel();

/**
 * Place for business-logic of calendar
 */
class EventsOperationsLogic extends Component {

    static defaultProps = {
        daysCount: 5,
        items: [],
        instance: 1,
        userId: null
    };

    static propTypes = {
      daysCount: PropTypes.number,
      items: PropTypes.arrayOf(PropTypes.object),
      instance: PropTypes.number,
      userId: PropTypes.oneOfType([
          PropTypes.number,
          PropTypes.string
      ])
    };

    state = {
        onSelectPanelShow: false,
        onPickEventPanelShow: false,
        currentApi: null,
        currentEvent: null,
        zones: {}
    };

    componentDidMount() {
        this.props.modalControl.setCancelCallback(this.closeAll);
    }

    eventClickHandler = (event) => {
        this.setState({
            onSelectPanelShow: false,
            onPickEventPanelShow: true,
            currentApi: event.calendarApi,
            currentEvent: event
        });
    };

    onIntervalChanged = async (event) => {
        this.setState({onPickEventPanelShow: false});

        const currentEvent = event.event || event;

        try {
          const answer = await Events.change(currentEvent.id, {
            start: currentEvent.start || null,
            end: currentEvent.end || null,
            zone: event.calendarCode,
            userId: this.props.userId
          });
          if (!answer.status) {

          }
        } catch (e) {

        }
    };

    onSelectTime = (event) => {
        this.setState({
            onSelectPanelShow: true,
            onPickEventPanelShow: false,
            currentApi: event.calendarApi,
            currentEvent: event
        });
    };

    onUnselectTime = () => {
        this.setState({onSelectPanelShow: false});
    };

    closeAll = async () => {
        this.setState({
            onSelectPanelShow: false,
            onPickEventPanelShow: false,
        });

        return {status: true}
    };

    addEventModal = (event) => {
        event.stopPropagation();
        let params = {};

        params.start = this.state.currentEvent.start;
        params.end = this.state.currentEvent.end;

        params.time = getMinutesBetweenDates(params.start, params.end);

        this.props.modalControl.setSuccessCallback(this.addEvent);
        this.props.modalControl.setParams(params);
        this.props.modalControl.makeVisible();
    };

    removeHandler = (event) => {
        event.stopPropagation();
        const eventApi = this.state.currentEvent.event;

        this.state.currentApi.removeItem(eventApi.id);
        this.setState({onPickEventPanelShow: false});
    };

    changeEventModal = (event) => {
        event.stopPropagation();
        let params = {};
        const eventApi = this.state.currentEvent.event;

        if (!eventApi) {
            console.error('Что-то не так c eventApi');
            return;
        }

        const startTime = eventApi.start;
        const endTime = eventApi.end;

        params = {...eventApi.extendedProps, time: getMinutesBetweenDates(startTime, endTime)};

        this.props.modalControl.setSuccessCallback(this.changeEvent.bind(null, eventApi.id));
        this.props.modalControl.setParams(params);
        this.props.modalControl.makeVisible();
    };

    /* Async functions which can be to delegate to interface who can change Event params */
    addEvent = async (params) => {
        try {
            const answer = await Events.add(params);
            this.closeAll();
            // TODO: Further, id will be comes from API
            this.state.currentApi.addItem({...params, id: Math.ceil(Math.random() * 10000)});

            return answer;
        } catch (e) {
            console.error(e.message);
            this.closeAll();
        }
    };

    changeEvent = async (id, params) => {
        try {
            const answer = await Events.change(id, params);
            this.closeAll();
            this.state.currentApi.changeItem(id, params);

            return answer;
        } catch (e) {
            console.error(e.message);
            this.closeAll();
        }
    };

    render() {
        return (
            <React.Fragment>
                <NavBar daysCount={7}>
                    {(currentDate) => {
                      return this.props.zones.map(item => {
                        return <React.Fragment key={item.id}>
                          {!item.first && <h3>{item.name}</h3>}
                          <CalendarController
                              planItems={this.props.items.filter(task => task.zone === item.code)}
                              daysCount={this.props.daysCount}
                              calendarName={`${item.code}_dev${this.props.instance}`}
                              calendarCode={item.code}
                              hours={item.hours}
                              selectedDate={currentDate}
                              onSelectTime={this.onSelectTime}
                              onUnselectTime={this.onUnselectTime}
                              eventClickHandler={this.eventClickHandler}
                              eventResizeHandler={this.onIntervalChanged}
                              eventDropHandler={this.onIntervalChanged}
                              drop={this.onIntervalChanged}
                              showHeader={item.first}
                          />
                        </React.Fragment>
                      })
                    }}
                </NavBar>
                <FixBottomContainer show={this.state.onSelectPanelShow} elementSelector={'.fc-highlight'}>
                    <ButtonGroup variant="contained" size="small" aria-label="small outlined button group">
                        <AddButton onClick={this.addEventModal}>Бронь</AddButton>
                        <AddButton onClick={this.addEventModal}>Отметка о времени</AddButton>
                    </ButtonGroup>
                </FixBottomContainer>
                <FixBottomContainer show={this.state.onPickEventPanelShow} elementSelector={'.fc-allow-mouse-resize'}>
                    <ButtonGroup variant="contained" size="small" aria-label="small outlined button group">
                        <AddButton onClick={this.changeEventModal}>Изменить</AddButton>
                        <AddButton onClick={this.removeHandler}>Удалить</AddButton>
                    </ButtonGroup>
                </FixBottomContainer>
            </React.Fragment>
        );
    }
}

export default EventsOperationsLogic;
