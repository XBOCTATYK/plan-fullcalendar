import React, {Component} from 'react';
import './PlanItem.css';
import { observer } from 'mobx-react';
import { ResizableBox } from 'react-resizable';
import Draggable from 'react-draggable';
import CONFIG from 'config/app.config';


class PlanItem extends Component {
    constructor(props) {
        super(props);

        this.element = React.createRef();
        this.resizeDelta = 0;
        this.currentSize = this.props.params.time*CONFIG.drawMultiple;
    }

    changeTime = (props) => {
        props.params.setTime(props.params.time + this.resizeDelta);
    };

    dragStart = () => {
        this.props.drag.dragStart(this.props.id);
    };

    onResizeStart = () => {
        this.currentSize = this.props.params.time*CONFIG.drawMultiple;
        this.resizeDelta = 0;
    };

    onResize = (event, data) => {

        const resizeDirection = this.currentSize - data.size.height;

        if (resizeDirection > 0) {
            this.resizeDelta -= CONFIG.timeSampling;
        }
        if (resizeDirection < 0) {
            this.resizeDelta += CONFIG.timeSampling;
        }

        this.currentSize = data.size.height;

    };

    render() {
        return (
            <PlanItemO
                ref={this.element}
                dragStart={this.dragStart}
                changeTime={this.changeTime}
                onResize={this.onResize}
                onResizeStart={this.onResizeStart}
                {...this.props}/>
        );
    }
}

const PlanItemO = observer(props => {

    let visualGrid = CONFIG.timeSampling*CONFIG.drawMultiple;

    return (
        <Draggable
            scale={1}
            handle={".cursor"}
            position={!props.drag.drag ? {x: 0, y: 0} : null}
            height={props.params.time*CONFIG.drawMultiple}
            onStart={(event) => {props.dragStart(event)}}
        >
            <div className={'drag-container box no-cursor'}>
        <ResizableBox
            className={`plan-item plan-item--${props.zone}`}
            width={'100%'} height={props.params.time*CONFIG.drawMultiple}
            axis={'y'}
            draggableOpts={{
                grid: [visualGrid, visualGrid]
            }}
            onResize={props.onResize}
            onResizeStart={props.onResizeStart}
            onResizeStop={() => {
                props.changeTime(props);
            }}
            onDoubleClick={props.editModal}
            minConstraints={[visualGrid, visualGrid]}
            maxConstraints={[900, 900]}>
            <div className={`plan-item__color plan-item__color--${props.priority}`}>!</div>
            <div className={'plan-item__body cursor'}>
                <div className={'plan-item__title-block'}>
                    <div className={'plan-item__project'}>{props.params.projectName}</div>
                    <div className={'plan-item__title'}>{props.params.name}</div>
                    <div className={'plan-item__time'}>{props.params.time}</div>
                </div>
            </div>
            <div className={'plan-item__control'}>
                <a className={`plan-item__link link`} href={`plan-item__link link`}/>
                <div className={'plan-item__checked-container'}>
                    <div className={'plan-item__checked'} style={{height: props.params.complete + '%'}}/>
                </div>
            </div>
        </ResizableBox>
            </div>
        </Draggable>

    );
});

export default PlanItem;

